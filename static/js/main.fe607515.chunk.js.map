{"version":3,"sources":["App/App.js","index.js","App/app.module.scss"],"names":["initialPoints","id","x","y","Point","point","cx","cy","r","GetLinesArray","points","lines","sortedPoints","QuickHull","i","length","push","x1","y1","x2","y2","stroke","App","useState","changePoints","ref","useRef","selectedPointId","changeSelectedPointId","startDrag","useCallback","e","target","Number","drag","preventDefault","CTM","current","getScreenCTM","prev","map","p","clientX","a","clientY","f","d","endDrag","useEffect","refCurrent","addEventListener","removeEventListener","className","classes","wrapper","drawingArea","width","height","viewBox","xmlns","memo","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"0NAOMA,EAAgB,CACpB,CAAEC,GAAI,EAAGC,EAAG,IAAKC,EAAG,KACpB,CAAEF,GAAI,EAAGC,EAAG,IAAKC,EAAG,KACpB,CAAEF,GAAI,EAAGC,EAAG,IAAKC,EAAG,KACpB,CAAEF,GAAI,EAAGC,EAAG,IAAKC,EAAG,MAGhBC,EAAQ,SAAC,GAA6B,IAAD,IAA1BC,MAASJ,EAAiB,EAAjBA,GAAIC,EAAa,EAAbA,EAAGC,EAAU,EAAVA,EAC/B,OAAO,wBAAQG,GAAIJ,EAAGK,GAAIJ,EAAGK,EAAG,EAAGP,GAAIA,KAGnCQ,EAAgB,SAACC,GAIrB,IAHA,IAAMC,EAAQ,GACRC,EAAgBC,EAAUH,GAEvBI,EAAI,EAAGA,EAAIF,EAAaG,OAAQD,IACnCF,EAAaE,EAAI,IACnBH,EAAMK,KACJ,sBAEEC,GAAIL,EAAaE,GAAGZ,EACpBgB,GAAIN,EAAaE,GAAGX,EACpBgB,GAAIP,EAAaE,EAAI,GAAGZ,EACxBkB,GAAIR,EAAaE,EAAI,GAAGX,EACxBkB,OAAO,SALFT,EAAaE,GAAGb,KAW7B,OAAOU,GAGHW,EAAM,WACV,MAA+BC,mBAASvB,GAAxC,mBAAOU,EAAP,KAAec,EAAf,KAEMC,EAAMC,mBAEZ,EAAiDH,mBAAS,MAA1D,mBAAOI,EAAP,KAAwBC,EAAxB,KAEMC,EAAYC,uBAAY,SAACC,GACzBA,EAAEC,OAAO/B,IACX2B,EAAsBK,OAAOF,EAAEC,OAAO/B,OAEvC,IAEGiC,EAAOJ,uBAAY,SAACC,GACxB,GAAIJ,EAAiB,CACnBI,EAAEI,iBAEF,IACMC,EADaX,EAAIY,QACAC,eAEvBd,GAAa,SAAAe,GAAI,OAAIA,EAAKC,KAAI,SAAAC,GAC5B,OAAIA,EAAExC,KAAO0B,EACJc,EAEF,CAAExC,GAAI0B,EAAiBzB,GAAI6B,EAAEW,QAAUN,EAAIL,GAAKK,EAAIO,EAAGxC,GAAI4B,EAAEa,QAAUR,EAAIS,GAAKT,EAAIU,YAG9F,CAACnB,IAEEoB,EAAUjB,uBAAY,WAC1BF,EAAsB,QACrB,IAgBH,OAdAoB,qBAAU,WACR,IAAMC,EAAaxB,EAAIY,QAKvB,OAJAY,EAAWC,iBAAiB,YAAarB,GACzCoB,EAAWC,iBAAiB,YAAahB,GACzCe,EAAWC,iBAAiB,UAAWH,GACvCE,EAAWC,iBAAiB,aAAcH,GACnC,WACLE,EAAWE,oBAAoB,YAAatB,GAC5CoB,EAAWE,oBAAoB,YAAajB,GAC5Ce,EAAWE,oBAAoB,UAAWJ,GAC1CE,EAAWE,oBAAoB,aAAcJ,MAE9C,CAAClB,EAAWK,EAAMa,IAGnB,qBAAKK,UAAWC,IAAQC,QAAxB,SACE,qBAAKF,UAAWC,IAAQE,YAAxB,SACE,sBAAK9B,IAAKA,EAAK+B,MAtFT,IAsFuBC,OArFtB,IAqFsCC,QAAO,cAtF9C,IAsF8C,YArF7C,KAqFyEC,MAAM,6BAAtF,UACGjD,EAAO8B,KAAI,SAACnC,GAAD,OAAW,cAAC,EAAD,CAAsBA,MAAOA,GAAjBA,EAAMJ,OACxCQ,EAAcC,GAAQ8B,KAAI,SAAA1B,GAAC,OAAIA,aAO3B8C,iBAAKtC,GC9FpBuC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCR1BC,EAAOC,QAAU,CAAC,QAAU,qBAAqB,YAAc,4B","file":"static/js/main.fe607515.chunk.js","sourcesContent":["import React, { memo, useState, useEffect, useRef, useCallback } from 'react';\r\nimport * as QuickHull from 'quickhull';\r\nimport classes from './app.module.scss';\r\n\r\nconst WIDTH = 600;\r\nconst HEIGHT = 400;\r\n\r\nconst initialPoints = [\r\n  { id: 1, x: 200, y: 100 },\r\n  { id: 2, x: 400, y: 100 },\r\n  { id: 3, x: 400, y: 300 },\r\n  { id: 4, x: 200, y: 300 },\r\n];\r\n\r\nconst Point = ({ point: { id, x, y } }) => {\r\n  return <circle cx={x} cy={y} r={5} id={id} />\r\n}\r\n\r\nconst GetLinesArray = (points) => {\r\n  const lines = [];\r\n  const sortedPoints =  QuickHull(points);\r\n\r\n  for (let i = 0; i < sortedPoints.length; i++) {\r\n    if (sortedPoints[i + 1]) {\r\n      lines.push(\r\n        <line\r\n          key={sortedPoints[i].id}\r\n          x1={sortedPoints[i].x}\r\n          y1={sortedPoints[i].y}\r\n          x2={sortedPoints[i + 1].x}\r\n          y2={sortedPoints[i + 1].y}\r\n          stroke=\"black\"\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  return lines;\r\n}\r\n\r\nconst App = () => {\r\n  const [points, changePoints] = useState(initialPoints);\r\n\r\n  const ref = useRef();\r\n\r\n  const [selectedPointId, changeSelectedPointId] = useState(null);\r\n\r\n  const startDrag = useCallback((e) => {\r\n    if (e.target.id) {\r\n      changeSelectedPointId(Number(e.target.id));\r\n    }\r\n  }, []);\r\n\r\n  const drag = useCallback((e) => {\r\n    if (selectedPointId) {\r\n      e.preventDefault();\r\n\r\n      const refCurrent = ref.current;\r\n      const CTM = refCurrent.getScreenCTM();\r\n\r\n      changePoints(prev => prev.map(p => {\r\n        if (p.id !== selectedPointId) {\r\n          return p;\r\n        }\r\n        return { id: selectedPointId, x: (e.clientX - CTM.e) / CTM.a, y: (e.clientY - CTM.f) / CTM.d }\r\n      }))\r\n    }\r\n  }, [selectedPointId]);\r\n\r\n  const endDrag = useCallback(() => {\r\n    changeSelectedPointId(null);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const refCurrent = ref.current;\r\n    refCurrent.addEventListener('mousedown', startDrag);\r\n    refCurrent.addEventListener('mousemove', drag);\r\n    refCurrent.addEventListener('mouseup', endDrag);\r\n    refCurrent.addEventListener('mouseleave', endDrag);\r\n    return () => {\r\n      refCurrent.removeEventListener('mousedown', startDrag);\r\n      refCurrent.removeEventListener('mousemove', drag);\r\n      refCurrent.removeEventListener('mouseup', endDrag);\r\n      refCurrent.removeEventListener('mouseleave', endDrag);\r\n    }\r\n  }, [startDrag, drag, endDrag]);\r\n\r\n  return (\r\n    <div className={classes.wrapper}>\r\n      <div className={classes.drawingArea}>\r\n        <svg ref={ref} width={WIDTH} height={HEIGHT} viewBox={`0 0 ${WIDTH} ${HEIGHT}`} xmlns=\"http://www.w3.org/2000/svg\">\r\n          {points.map((point) => <Point key={point.id} point={point} /> )}\r\n          {GetLinesArray(points).map(i => i)}\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"app_wrapper__GKtk_\",\"drawingArea\":\"app_drawingArea__2su1b\"};"],"sourceRoot":""}